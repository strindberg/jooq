/*
 * This file is generated by jOOQ.
 */
package se.biobanksverige.sbr.db;


import javax.annotation.processing.Generated;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import se.biobanksverige.sbr.db.tables.Issue;
import se.biobanksverige.sbr.db.tables.IssueComplete;
import se.biobanksverige.sbr.db.tables.IssueConsent;
import se.biobanksverige.sbr.db.tables.records.IssueCompleteRecord;
import se.biobanksverige.sbr.db.tables.records.IssueConsentRecord;
import se.biobanksverige.sbr.db.tables.records.IssueRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.2",
        "schema version:none"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<IssueRecord> ISSUE_ID_TYPE_KEY = Internal.createUniqueKey(Issue.ISSUE, DSL.name("issue_id_type_key"), new TableField[] { Issue.ISSUE.ID, Issue.ISSUE.TYPE }, true);
    public static final UniqueKey<IssueRecord> ISSUE_PKEY = Internal.createUniqueKey(Issue.ISSUE, DSL.name("issue_pkey"), new TableField[] { Issue.ISSUE.ID }, true);
    public static final UniqueKey<IssueCompleteRecord> ISSUE_COMPLETE_PKEY = Internal.createUniqueKey(IssueComplete.ISSUE_COMPLETE, DSL.name("issue_complete_pkey"), new TableField[] { IssueComplete.ISSUE_COMPLETE.ID }, true);
    public static final UniqueKey<IssueConsentRecord> ISSUE_CONSENT_PKEY = Internal.createUniqueKey(IssueConsent.ISSUE_CONSENT, DSL.name("issue_consent_pkey"), new TableField[] { IssueConsent.ISSUE_CONSENT.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<IssueCompleteRecord, IssueRecord> ISSUE_COMPLETE__ISSUE = Internal.createForeignKey(IssueComplete.ISSUE_COMPLETE, DSL.name("issue"), new TableField[] { IssueComplete.ISSUE_COMPLETE.ID, IssueComplete.ISSUE_COMPLETE.TYPE }, Keys.ISSUE_ID_TYPE_KEY, new TableField[] { Issue.ISSUE.ID, Issue.ISSUE.TYPE }, true);
    public static final ForeignKey<IssueConsentRecord, IssueRecord> ISSUE_CONSENT__ISSUE = Internal.createForeignKey(IssueConsent.ISSUE_CONSENT, DSL.name("issue"), new TableField[] { IssueConsent.ISSUE_CONSENT.ID, IssueConsent.ISSUE_CONSENT.TYPE }, Keys.ISSUE_ID_TYPE_KEY, new TableField[] { Issue.ISSUE.ID, Issue.ISSUE.TYPE }, true);
}
